<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Int variables and settings
global.current_bgm = bgm_title;
global.dark = false;
global.game_mode = 'Menu';

score = 0; //reset the score value
//Debugging function
show_debug_overlay(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define platform
switch(os_type){ //Which controller type or platform
//There are "PC", "Mobile", "Console"
   case (os_windows):
   case (os_macosx):
   case (os_linux):
   global.con_type = "PC";
   break;
   
   case (os_android):
   case (os_ios):
   case (os_winphone):
   global.con_type = "Mobile";
   //device_mouse_dbclick_enable(false);
   break;
   
   case (os_ps3):
   case (os_ps4):
   case (os_psvita):
   case (os_xboxone):
   global.con_type = "Console";
   break;
}

//For blue line background
display_set_gui_size(1280,720);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting menu buttons with numpad
if (global.con_type == "Mobile"){
   display_set_gui_size(1280,720);
   
   
}
global.control = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu button function

if (keyboard_check_pressed(vk_numpad0)){
    game_end();
}
if (keyboard_check_pressed(vk_numpad1)){ //Move to room test 1
    audio_stop_sound(global.current_bgm);
    global.player = obj_player;
    var leave = instance_create(0,0,obj_transition_fade);
    ini_open(working_directory+"level_progress.sav");
    with (leave){goal = ini_read_real("Level","room",rm_test);}
    ini_close();
    global.current_bgm = bgm_01;
    audio_play_sound(global.current_bgm,1,true);
    global.game_mode = 'Level';
}
if (keyboard_check_pressed(vk_numpad2)){ //Start run mode
    audio_stop_sound(global.current_bgm);
    global.player = obj_player;
    var leave = instance_create(0,0,obj_transition_fade);
    with (leave){goal = rm_run;}
    global.current_bgm = bgm_02;
    audio_play_sound(global.current_bgm,1,true);
    global.game_mode = 'Run';
}
if (keyboard_check_pressed(vk_numpad3)){ //Toggle options

}
//Debug keys
if (keyboard_check_pressed(ord("C"))){
    if (file_exists(working_directory+"level_progress.sav")){
        file_delete("level_progress.sav");
        show_message("Reset save file");
    }
}
if (keyboard_check_pressed(ord("L"))){
    if (global.dark){
        global.dark = false;
        show_message("Light is on");
    }
    else{
        global.dark = true;
        show_message("Light is off");
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resize the screen
display_set_gui_size(1280,720);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the title music
if (!audio_is_playing(global.current_bgm) &amp;&amp; audio_group_is_loaded(audiogroup_bgm)){
    audio_play_sound(global.current_bgm,1,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instance destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Font settings, drawing buttons
//Transparency 0-1
draw_set_alpha(1);

//Set color to any value
draw_set_colour(c_white);

//Set font from resourcue (default Arial) (-1)
draw_set_font(fnt_OCR_A_ext);

//Set the font's anchor point to be left, center, or right
draw_set_halign(fa_center);

//Set the font's anchor point top, middle, or bottom
draw_set_valign(fa_middle);

//Draw the title
scr_text_outline(640,100,"project_lookout",1,c_blue);

//Define menu buttons
var start_test = virtual_key_add(450, 319, 370, 53, vk_numpad1);
var start_run = virtual_key_add(464, 419, 340, 53, vk_numpad2);
var change_option = virtual_key_add(421, 520, 428, 50, vk_numpad3);
var end_game = virtual_key_add(550, 622, 170, 46, vk_numpad0);
var light_toggle = virtual_key_add(0, 0, 170, 170, ord("L"));

//Draw menu buttons
draw_set_font(fnt_Courier_new);
scr_text_outline(640,350,"start_test();",1,c_black);
scr_text_outline(640,450,"start_run();",1,c_black);
scr_text_outline(640,550,"change(option);",1,c_black);
scr_text_outline(640,650,"end();",1,c_black);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw background
draw_set_colour(c_black);
draw_rectangle(0,0,room_width,room_height,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
