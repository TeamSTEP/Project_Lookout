<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_testchar_walking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_par_collision</parentName>
  <maskName>spr_body_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Charactor variables
max_speed = 8;
holding_gun = "None";
holding_item = "None";
current_item_type = 'weapon';
scr_item_stats();
shooting = false;
current_ammo = -1;
shadow = true;
hp = 5;
friction = 0.5;
firerate = 0;
alarm[1] = 0;
stepping_floor = 0;
mass = 500;

standing = true;
throwing_power = 0.1; //1 is max



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Light effect
light_create(sp_light_point, 1, c_white, 0.3, 0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dynamic lighting effect clear
light_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create deadbody
body = instance_create(x, y, obj_deadbody);
body.speed = irandom(2)+1;
body.direction = (image_angle);
body.image_angle = (image_angle);
body.turn = choose(3, 2, 1, -1, -2, -3) * 2;
audio_play_sound(sd_deadbody, 0, false);
global.player = body.object_index;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drop gun when dead
if (holding_gun != "None") { //Throw the gun
var throw_gun, xx, yy
xx = x + lengthdir_x(sprite_width / 2 + 50, image_angle + 90);
yy = y + lengthdir_y(sprite_height / 2 + 50, image_angle + 90);
if (place_free(xx, yy)){
throw_gun = instance_create(xx, yy, weapon_object);
with(throw_gun) {
ammo = other.current_ammo;
speed = 5;
direction = image_angle;
image_angle = image_angle + 90;
thrown = true;
}
current_ammo = -1;
holding_gun = "None";
}
else if (!place_free(xx, yy)){
xx = x + lengthdir_x(sprite_width / 2 + 50, image_angle - 90);
yy = y + lengthdir_y(sprite_height / 2 + 50, image_angle - 90);
throw_gun = instance_create(xx, yy, weapon_object);
with(throw_gun) {
ammo = other.current_ammo;
speed = 5;
direction = image_angle;
image_angle = image_angle + 90;
thrown = true;
}
current_ammo = -1;
holding_gun = "None";
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For fire rate
shooting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Footsteps sound
if (standing == true &amp;&amp; speed &gt;= max_speed/2){
    if (tile_layer_find(1000000, x, y) != -1){stepping_floor = sd_footsteps_metal;}
    if (tile_layer_find(999999, x, y) != -1){stepping_floor = sd_footsteps_carpet;}
    if !audio_is_playing(stepping_floor){audio_play_sound(stepping_floor,0,false)}
    
}
if (!standing || speed &lt;= max_speed/2) {audio_stop_sound(stepping_floor);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character settings
scr_item_stats(); //Set gun stats
if (global.player == object_index){scr_Controls();} //This enables the controls for this char

//Weapon holding animation settings for the charactor
if (current_item_type == 'weapon'){
if (holding_gun == "Pistol"){sprite_index = spr_testchar_pistol;}
if (holding_gun == "None"){sprite_index = spr_testchar_walking;}
if (holding_gun == "Rifle"){sprite_index = spr_testchar_rifle;}
if (holding_gun == "Shotgun"){sprite_index = spr_testchar_rifle;}
if (holding_gun == "Laser"){sprite_index = spr_testchar_rifle;}
}
else{sprite_index = spr_testchar_walking;}

if (standing){image_speed = speed/max_speed;}
else if (!standing){image_speed = speed/max_speed * 0.5;}

if (hp &lt;= 0) {instance_destroy();}
x=clamp(x,132,room_width);
y=clamp(y,132,room_height);
if (y &lt; 132 || x &lt; 132){show_debug_message("Help me I'm stuck!");}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_par_gun">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get the gun
if (holding_gun == "None"){
    holding_gun = other.gun_name;
    current_ammo = other.ammo;
    with(other){instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_par_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision checks

//Set up vars
var a,xoff,yoff,om,mm,mag;

a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
xoff = lengthdir_x(1, a);                       //Get the offset vector
yoff = lengthdir_y(1, a);
om = other.mass / mass;                         //start the fake "physics mass" calculations
mm = mass / other.mass;
mag = sqrt((om * om) + (mm * mm));
om /= mag;
mm /= mag;

//Move out of collision
while (place_meeting(x, y, other.id)){
    x -= xoff * om; //Move the instance out of collision
    y -= yoff * om;
    other.x += xoff * mm; //Move the other instance out of the collision
    other.y += yoff * mm;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw graphics
//this will make a smooth shadow for the object
if (shadow){
    var i, a;
    a = 1/ 16;
    for (i = 1; i &lt; 10; i += 1;)
    {
        draw_sprite_ext(sprite_index, 0, x - i, y + i, 1, 1, image_angle, c_black, a);
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw crouching
if (standing == false){image_blend = c_blue;}
else{image_blend = c_white;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self
draw_set_colour(c_white);
draw_set_alpha(1.0);
draw_self(); //This code must go last

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw throwing power
if (global.con_type == "PC"){
    if (keyboard_check(ord("Q")) &amp;&amp; current_item_type == 'weapon' &amp;&amp; holding_gun != "None"){
        //for predicting the stopping location
        var v0 = 10 * (throwing_power+0.1);
        var f = 0.1;
        var dist = (v0*(v0-f))/(2*f);
        draw_set_alpha(0.4);
        draw_sprite(weapon_sprite,0,x+lengthdir_x(dist,image_angle),y+lengthdir_y(dist,image_angle));
        draw_set_alpha(1);
    }
    
    if (keyboard_check(ord("Q")) &amp;&amp; current_item_type == 'throwing' &amp;&amp; holding_item != "None"){
        //for predicting the stopping location
        var v0 = 10 * (throwing_power+0.1);
        var f = 0.1;
        var dist = (v0*(v0-f))/(2*f);
        draw_set_alpha(0.4);
        draw_sprite(item_sprite,0,x+lengthdir_x(dist,image_angle),y+lengthdir_y(dist,image_angle));
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
