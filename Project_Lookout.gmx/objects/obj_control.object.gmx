<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pointer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create controller objects
if (!instance_exists(obj_light_control)){instance_create(x,y,obj_light_control);}
if (!instance_exists(obj_shadow_surface)){instance_create(x,y,obj_shadow_surface);}
if (!instance_exists(obj_decal_surface)){instance_create(x,y,obj_decal_surface);}
if (!instance_exists(global.player)){
    var player = instance_create(x,y,global.player);
    if (global.game_mode == 'Run'){
        with(player){
            holding_gun = "Pistol";
            current_ammo = 15;
        }
    }
}
if (!instance_exists(obj_camera)){instance_create(global.player.x,global.player.y,obj_camera);}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start settings
if (global.game_mode == 'Level'){scr_load_progress(room);}
//global.player = obj_testchar; //This will set who is considered to be the player object
global.laser_prec = 10; //How much the laser will be precise in collision checking
//global.player.persistent = true;
debug = true; //Shows FPS and other information
if (!global.control){global.control = true;}
global.view_timer = 0;

pause = false;
drag_x = mouse_x;
drag_y = mouse_y;
display_set_gui_size(1920,1080);
rendrate = 0; //Rendering referesh rate
dragging_mode = false;





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the grid for motion planning
if (global.game_mode != 'Run'){
    var cellsize = CELLSIZE/2;
    var hcells = room_width div cellsize;
    var vcells = room_height div cellsize;
    global.mp_grid = mp_grid_create(0,0,hcells, vcells, cellsize, cellsize);
    scr_scan_mp_grid(global.mp_grid, cellsize);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define mobile joystick and mobile controls
if (global.con_type == "Mobile"){
   if (global.control){
   
   
   //set and show the virtual keys
   //var q_button = virtual_key_add(0, 360, 180, 180, ord('Q')); //Throwing items
   var control_button = virtual_key_add(1080, 900, 180, 180, vk_control); //Crawling
   var switch_weapon = virtual_key_add(1640, 920, 280, 160, ord('E')); //Switching items
   
   //virtual_key_show(q_button);
   virtual_key_show(control_button);
   
   //set the x, y and the size for the joystick
   vstick_init(1, 240, 840, 180, true, noone, noone) //Left joystick
   vstick_init(2, 1590, 750, 150, true, noone, noone) //Right joystick
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room optimisation code
/*
//This will draw the walls in a surface and destroy them
global.wallopsprite = spr_wall;
var wallsurface=0, w=0;  //Variables for the Surface on which all the wall sprites will be put on, and the New Wall object that will be made.
wallsurface=surface_create(room_width,room_height+1);  //Prepare a surface as big as the room, adding an extra pixel vertically so we can have transparency.

surface_set_target(wallsurface);  //Prepare to draw on the surface.
draw_clear(c_white);  //Clear the entire surface with the desired transparent color.
with obj_wall{  //With all of the walls in the room...
    if object_index==obj_wall{  //If it's not inheriting from anything (you may want to handle slopes with their own combined slope object, for example...
        draw_sprite(sprite_index,-1,x,y);  //Draw their sprite on the surface at their location.
        instance_destroy();  //Then delete theirself.
    }
}
if sprite_exists(global.wallopsprite){sprite_delete(global.wallopsprite);}  //If there was a combined wall surface sprite made before, get rid of it.  This is crucial you store this, as these will build up if you don't get rid of them, and can crash the game.
global.wallopsprite=sprite_create_from_surface(wallsurface,0,0,surface_get_width(wallsurface),surface_get_height(wallsurface),true,false,0,0);  //Make a new sprite from the surface made of all the Wall objects.
w=instance_create(0,0,obj_wall);  //Make a brand new Wall object at the top left of the room;
w.sprite_index=global.wallopsprite;  //Set its sprite to the sprite made from the surface.
w.mask_index=w.sprite_index;  //Set its mask to its sprite.
surface_free(wallsurface);  //Free up the memory from that surface.
surface_reset_target();  //Reset the drawing location.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Optimization and rendering
if (!pause){
   if (rendrate == 5){rendrate = 0; scr_render(132);}
   else {rendrate++;}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause menu functions
if (pause){
if (keyboard_check_pressed(vk_numpad0)){ //go to main menu
var leave = instance_create(0,0,obj_transition_fade);
with (leave){goal = rm_title;}
global.current_bgm = bgm_title;
}
if (keyboard_check_pressed(vk_numpad1)){ //restart game
audio_group_stop_all(audiogroup_se); //stop all sound effects
room_restart();
audio_play_sound(global.current_bgm,1,true);
}
if (keyboard_check_pressed(vk_numpad2)){ //Change options
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control dynamic lighting effect
//if (!instance_exists(obj_light_control)){instance_create(x,y,obj_light_control)}
if (global.dark == true &amp;&amp; obj_light_control.visible != true){obj_light_control.visible = true}
if (global.dark == false &amp;&amp; obj_light_control.visible == true){obj_light_control.visible = false}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player health management
if (instance_exists(global.player)){
    health = global.player.hp;
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_control</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pointer location
if (global.control &amp;&amp; instance_exists(global.player)){
     var range, maxdis;
     maxdis = 250;
     range = scr_range_finder(global.player.x, global.player.y,global.player.image_angle,maxdis,obj_par_wall,false,true);
     
     if (range &lt;= 0){
        x = max(global.player.x + lengthdir_x(maxdis, global.player.image_angle),view_xview+sprite_width/2);
        y = max(global.player.y + lengthdir_y(maxdis, global.player.image_angle),view_yview+sprite_height/2);
     }
     else{
          x = max(global.player.x + lengthdir_x(range, global.player.image_angle),view_xview+sprite_width/2);
          y = max(global.player.y + lengthdir_y(range, global.player.image_angle),view_yview+sprite_height/2);
     }
     
     if (x + sprite_width/2 &gt;= view_xview + view_wview){x = view_xview + view_wview - sprite_width/2;}
     if (y + sprite_height/2 &gt;= view_yview + view_hview){y = view_yview + view_hview - sprite_height/2;}
}
else{exit;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mobile joystick logic
if (global.con_type == "Mobile"){
   vstick_step(1);
   vstick_step(2);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy grid
mp_grid_destroy(global.mp_grid);
show_debug_message("Room has ended");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug information
if (debug == true){
    draw_set_font(fnt_Courier_new);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_colour(c_lime);
    draw_set_alpha(1);
    var debug_info = "";
    debug_info += "Total Objects: " + string(instance_count)+"#";
    debug_info += "FPS: " + string(fps) + "/" + string(room_speed)+"#";
    debug_info += "Player health: " + string(health)+"#";
    var enemies = instance_number(obj_par_collision) -1;
    debug_info += "Enemies left: " + string(enemies)+"#";
    debug_info += "Score: " + string(score) + "#";
    
    draw_text(0,40,debug_info);
    //draw_text_transformed(0,210, "Holding weapon: " + string(global.player.current_item_type),1,1,0);
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game over screen and function
if (health &lt;= 0 || global.player == obj_deadbody){
   global.control = false;
   score = 0;
   draw_set_colour(c_black);
   draw_set_alpha(scr_wave(0,0.8,1,0));
   draw_rectangle(0,0,display_get_gui_width(),display_get_gui_height(),false);
   
   draw_set_colour(c_white);
   draw_set_font(fnt_OCR_A_ext);
   draw_set_halign(fa_center);
   draw_set_valign(fa_middle);
   draw_set_alpha(1);
   scr_text_outline(display_get_gui_width()/2,100,"Subject Lost",1,c_black);
   
   draw_set_font(fnt_Courier_new);
   draw_set_colour(c_black);
   scr_text_outline(display_get_gui_width()/2,display_get_gui_height()-100,"Touch screen to restart",1,c_white);
   
   if(!pause &amp;&amp; mouse_check_button_pressed(mb_left)){
       show_debug_message("Player is dead, restarting game");
       global.player = obj_player;
       room_restart(); 
       audio_group_stop_all(audiogroup_se); //stop all sound effects
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD and GUI
if (global.control){
if (global.con_type == "Mobile"){
   draw_set_colour(c_white);
   vstick_draw(1);
   vstick_draw(2);
}
draw_set_colour(c_white);
draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fnt_Courier_new);
scr_text_outline(0,0,"Ammo: "+string(global.player.current_ammo),1,c_blue);
draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
var sel_item, sel_gun;
if (global.player.current_item_type == 'weapon'){sel_item = c_black; sel_gun = c_white;}
else{sel_item = c_white; sel_gun = c_black;}
scr_text_outline(display_get_gui_width(),display_get_gui_height(),string(global.player.holding_item),1,sel_item);
scr_text_outline(display_get_gui_width(),display_get_gui_height() - 50,string(global.player.holding_gun),1,sel_gun);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause screen
if (keyboard_check_pressed(vk_backspace)){
//var pause_bg = scr_screen_capture();
   var resume = virtual_key_add(726, 214, 466, 110, vk_backspace);
   var restart = virtual_key_add(713, 385, 517, 110, vk_numpad1);
   var change_option = virtual_key_add(587, 556, 770, 110, vk_numpad2);
   var menu = virtual_key_add(663, 727, 616, 110, vk_numpad0);
   /*
   virtual_key_show(resume);
   virtual_key_show(restart);
   virtual_key_show(change_option);
   virtual_key_show(menu);
   */
if (!pause){ //pause the game
   pause = true;
   io_clear();
   audio_pause_all();
   global.control = false;
   instance_deactivate_all(true);
   instance_activate_object(obj_light_control);
   instance_activate_object(obj_shadow_surface);
   instance_activate_object(obj_decal_surface);
   instance_activate_object(global.player);
}
else{ //resume the game
   pause = false;
   audio_resume_all();
   global.control = true;
   virtual_key_delete(resume);
   virtual_key_delete(restart);
   virtual_key_delete(change_option);
   virtual_key_delete(menu);
   instance_activate_all();
   //if (background_exists(pause_bg) = true) {background_delete(pause_bg)}
}
}

if (pause){ //draw pause menu
   //draw_background(pause_bg,0,0);
   draw_set_color(c_black);
   draw_rectangle(0,0,display_get_gui_width(),display_get_gui_height(),false);
   draw_set_alpha(1);
   draw_set_color(c_white);
   draw_set_font(fnt_OCR_A_ext);
   draw_set_halign(fa_right);
   draw_set_valign(fa_top);
   scr_text_outline(display_get_gui_width(),0,"Paused",1,c_blue);
   
   draw_set_halign(fa_center);
   draw_set_valign(fa_top);
   draw_set_font(fnt_Courier_new);
   scr_text_outline(display_get_gui_width()/2,214,"resume();",2,c_black);
   scr_text_outline(display_get_gui_width()/2,385,"restart();",2,c_black);
   scr_text_outline(display_get_gui_width()/2,556,"change(option);",2,c_black);
   scr_text_outline(display_get_gui_width()/2,727,"main_menu();",2,c_black);
   /*
   scr_text_outline(726,214,"resume();",1,c_black);
   scr_text_outline(713,385,"restart();",1,c_black);
   scr_text_outline(587,556,"change(option);",1,c_black);
   scr_text_outline(663,727,"main_menu();",1,c_black);
   */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw pathfinding grid
/*
if (debug){
   draw_set_alpha(0.3);
   mp_grid_draw(global.mp_grid);
   draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
if (global.control){draw_self();}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw throwing weapon
if (dragging_mode &amp;&amp; global.con_type == "Mobile"){
    with(global.player){
        draw_set_color(c_green);
        draw_line(x,y,mouse_x,mouse_y);
        //for predicting the stopping location
        var v0 = 10 * (throwing_power+0.1);
        var f = 0.1;
        var dist = (v0*(v0-f))/(2*f);
        draw_set_alpha(0.4);
        if (global.player.current_item_type == 'throwing'){draw_sprite(item_sprite,0,x+lengthdir_x(dist,image_angle),y+lengthdir_y(dist,image_angle));}
        else{draw_sprite(weapon_sprite,0,x+lengthdir_x(dist,image_angle),y+lengthdir_y(dist,image_angle));}
        draw_set_alpha(1);
        
        //draw_text(x,y-sprite_height,string(dist));
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw enemy compass

if (global.control){
    with (global.player){
        var in = instance_number(obj_par_collision);
        if (in &gt; 1){
            for (var i = 2; i &lt;= in; i++){
                var enemy = scr_instance_nth_nearest(x,y,obj_par_collision,i);
                var line_length = 20;
                draw_line_colour(x + lengthdir_x(sprite_width, point_direction(x,y,enemy.x,enemy.y)),y + lengthdir_y(sprite_width, point_direction(x,y,enemy.x,enemy.y)),x + lengthdir_x(sprite_width+line_length, point_direction(x,y,enemy.x,enemy.y)),y + lengthdir_y(sprite_width+line_length, point_direction(x,y,enemy.x,enemy.y)),c_lime,c_red);
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health and ammo bar
if (global.player != obj_deadbody &amp;&amp; global.control){
    if (global.player.current_ammo &gt;= 0){
        scr_draw_circular_bar(x,y,global.player.current_ammo,global.player.max_ammo,c_olive,sprite_width,1,2);
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
