<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_testchar_walking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_par_collision</parentName>
  <maskName>spr_body_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Charactor variables
max_speed = 8;
holding_gun = "None";
holding_item = "None";
current_item_type = 'weapon';
scr_item_stats();
shooting = false;
current_ammo = -1;
aiming = false;
shadow = true;
hp = 5;
friction = 0.5;
firerate = 0;
alarm[1] = -1;
stepping_floor = 0;
mass = 500;
if (global.player != object_index){
view_range = 500;
vision_angle = 90;
hear_range = 660;
state = 'none';
char_speed = 3;
chasing = false;
}
else{
standing = true;
throwing_power = 0.1; //1 is max
}


/*
holding_gun = "None";
scr_Gun_Stats();
char_speed = 3;
max_speed = 8;
current_ammo = -1;
patrol = false;
post_x = x;
post_y = y;
last_loc_x = x;
last_loc_y = y;
ini_dir = direction;
//shooting = false;
aiming = false;
shadow = true;
hp = 5;
friction = 0.5;
firerate = 0;
alarm[1] = 0;
mass = 500;

view_range = 500;
vision_angle = 90;
hear_range = 500;
state = 'none';
//there are three states; alert, question, none.
//alert will make the ai know where the player is, and will chase and shoot it
//question will make the ai know that the player is here, but will not know where it is, and look around

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grid movement AI
//it sets the last known location of the player
if (global.player != object_index){
    last_loc_x = x;
    last_loc_y = y;
    path = path_add();
    //Where the AI was first spawned. For returning back to post/patrol
    post_x = x;
    post_y = y;
    patrol = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flashlight effect
light_create(sp_light_spot, 1, c_white, 1, 0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dynamic lighting effect clear
light_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drop gun when dead
if (holding_gun != "None") { //Throw the gun
    var throw_gun, xx, yy
    xx = x + lengthdir_x(sprite_width / 2 + 50, image_angle + 90);
    yy = y + lengthdir_y(sprite_height / 2 + 50, image_angle + 90);
    if (place_free(xx, yy)){
        throw_gun = instance_create(xx, yy, weapon_object);
        with(throw_gun) {
            ammo = other.current_ammo;
            speed = 5;
            direction = image_angle;
            image_angle = image_angle + 90;
            thrown = true;
        }
        current_ammo = -1;
        holding_gun = "None";
    }
    else if (!place_free(xx, yy)){
        xx = x + lengthdir_x(sprite_width / 2 + 50, image_angle - 90);
        yy = y + lengthdir_y(sprite_height / 2 + 50, image_angle - 90);
        throw_gun = instance_create(xx, yy, weapon_object);
        with(throw_gun) {
            ammo = other.current_ammo;
            speed = 5;
            direction = image_angle;
            image_angle = image_angle + 90;
            thrown = true;
        }
        current_ammo = -1;
        holding_gun = "None";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create deadbody
body = instance_create(x, y, obj_deadbody);
body.speed = irandom(2)+1;
body.direction = (image_angle);
body.image_angle = (image_angle);
body.turn = choose(3, 2, 1, -1, -2, -3) * 2;
audio_play_sound(sd_deadbody, 0, false);
if (global.player == self){global.player = body.id;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State change and effect

switch(state){
    case ('chasing'):
        scr_grid_move(last_loc_x ,last_loc_y ,max_speed, path_action_stop);
        show_debug_message("alarm[1] case chasing");
    break;
    
    case ('question'):
         //Move to the place of question
         scr_grid_move(last_loc_x ,last_loc_y ,char_speed, path_action_stop);
         show_debug_message("alarm[1] case question");
         
    break;
    
    case ('none'):
         scr_grid_move(post_x ,post_y, char_speed, path_action_stop); //Get back to post
    break;
         
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For fire rate
//shooting = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Footsteps
if (global.player == object_index){
var stepping_floor;
stepping_floor = sd_footsteps_metal;

if (tile_layer_find(1000000, x, y) != -1){stepping_floor = sd_footsteps_metal}
if (tile_layer_find(999999, x, y) != -1){stepping_floor = sd_footsteps_carpet}


if (speed &gt; 2){
if (!audio_is_playing(stepping_floor)){audio_play_sound(stepping_floor,0,false)}
}
if (speed = 0){audio_stop_sound(stepping_floor)}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character settings
scr_item_stats(); //Set gun stats
if (global.player == object_index &amp;&amp; global.control) {scr_Controls();} //This enables the controls for this char
else {
    scr_AI(view_range, vision_angle,hear_range); //else wil activate the AI code
    current_item_type = 'weapon';
}

//Weapon holding animation settings for the charactor
if (current_item_type == 'weapon'){
    if (holding_gun == "Pistol"){sprite_index = spr_testchar_pistol;}
    if (holding_gun == "None"){sprite_index = spr_testchar_walking;}
    if (holding_gun == "Rifle"){sprite_index = spr_testchar_rifle;}
    if (holding_gun == "Shotgun"){sprite_index = spr_testchar_rifle;}
    if (holding_gun == "Laser"){sprite_index = spr_testchar_rifle;}
}
else{sprite_index = spr_testchar_walking;}

if (speed &gt; max_speed){speed = max_speed;} //speed limit
if (x == xprevious &amp;&amp; y == yprevious){image_speed = 0;}
else {image_speed = 1.0;}

if (hp &lt;= 0) {instance_destroy();}

x=clamp(x,132,room_width);
y=clamp(y,132,room_height);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flashlight angle
_light_angle = image_angle + 90;
if global.dark == true{vision_angle = 60;}
else if global.dark == false{vision_angle = 90;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_par_gun">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get the gun
if (holding_gun == "None"){
    holding_gun = other.gun_name;
    current_ammo = other.ammo;
    with(other){instance_destroy();}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_par_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision checks

//Set up vars
var a,xoff,yoff,om,mm,mag;

a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
xoff = lengthdir_x(1, a);                       //Get the offset vector
yoff = lengthdir_y(1, a);
om = other.mass / mass;                         //start the fake "physics mass" calculations
mm = mass / other.mass;
mag = sqrt((om * om) + (mm * mm));
om /= mag;
mm /= mag;

//Move out of collision
while (place_meeting(x, y, other.id))
{
x -= xoff * om; //Move the instance out of collision
y -= yoff * om;
other.x += xoff * mm; //Move the other instance out of the collision
other.y += yoff * mm;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw graphics
//this will make a smooth shadow for the object
if (shadow){
    var i, a;
    a = 1/ 16;
    for (i = 1; i &lt; 10; i += 1;)
    {
        draw_sprite_ext(sprite_index, 0, x - i, y + i, 1, 1, image_angle, c_black, a);
    }
}

image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self
draw_self(); //This code must go last

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw words/Debug
var text;
switch (state){
       case ('chasing'):
            text = "!!!";
            break;
       case ('alert'):
            text = "!";
            break;
       case ('none'):
            text = "...";
            break;
       case ('question'):
            text = "?";
            break;
}
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
scr_text_outline(x, y-sprite_height/2,string(text), 0.7, c_black);

draw_path(path, x, y, true);

var gamma = vision_angle;
var x1 = x + lengthdir_x(view_range, image_angle - gamma/2);
var y1 = y + lengthdir_y(view_range, image_angle - gamma/2);
var x2 = x + lengthdir_x(view_range, image_angle + gamma/2);
var y2 = y + lengthdir_y(view_range, image_angle + gamma/2);
draw_triangle_color(x,y,x1,y1,x2,y2,c_green,c_green,c_green,true); //Vision line
//draw_circle_color(x,y,hear_range,c_blue,c_blue,true); //Hearing range

//Draw last known location pointer
draw_sprite(spr_pointer,0,last_loc_x,last_loc_y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
