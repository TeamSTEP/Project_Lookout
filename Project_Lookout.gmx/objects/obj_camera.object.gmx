<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set values and view settings
view_xview[0] = global.player.x;
view_yview[0] = global.player.y;

shake = 0;
//image_speed = 0;
if (!view_enabled){
    view_visible[0] = true;
    view_enabled = true;
    view_wview[0] = 854;
    view_hview[0] = 480;
    view_wport[0] = 1280;
    view_hport[0] = 720;
    view_hborder[0] = 1280;
    view_vborder[0] = 720;
    view_hspeed = 35;
    view_vspeed = 35;
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera pan and movement
if (global.control){ //It will only work when player has control
    switch (global.con_type){
        case("PC"):
            //This controlls the drag and pan the screen with the right button of the mouse
            // start:
            if (mouse_check_button_pressed(mb_right)) {
                drag_x = mouse_x;
                drag_y = mouse_y;
                global.view_timer = room_speed;
                view_object = noone;
            }
            // update:
            if (mouse_check_button(mb_right)) {
                // actual dragging logic:
                view_xview = drag_x - (mouse_x - view_xview);
                view_yview = drag_y - (mouse_y - view_yview);
                // make sure view doesn't go outside the room:
                view_xview = max(0, min(view_xview, room_width - view_wview));
                view_yview = max(0, min(view_yview, room_height - view_hview));
            }
            //This will allow the camera to view back to the character after some time(global.view_timer)
            else {
                if (global.view_timer != 0) {
                    global.view_timer -= 1;
                }
            }
            if global.view_timer &lt;= 0 {
                view_object = obj_camera;
                view_hspeed = 35;
                view_vspeed = 35;
            }
        break;
        
        case ("Mobile"):
            if (!vstick_check(1) &amp;&amp; !vstick_check(2)){
                //setting the pan area
                var mx0raw, my0raw, mx1raw, my1raw;
                mx0raw = device_mouse_raw_x(0);
                my0raw = device_mouse_raw_y(0);
                mx1raw = device_mouse_raw_x(1);
                my1raw = device_mouse_raw_y(1);
                var dx = 0;
                var dy = 0;
                var dw = display_get_width();
                var dh = (display_get_height()/3)*2;
                
                if (device_mouse_check_button_pressed(0, mb_left) || device_mouse_check_button_pressed(1, mb_left)){
                    drag_x = mouse_x;
                    drag_y = mouse_y;
                }
                //if two fingers are in a certain location
                if (mx0raw &gt; dx &amp;&amp; mx0raw &lt; dw &amp;&amp; my0raw &gt; dy &amp;&amp; my0raw &lt; dh) &amp;&amp; (mx1raw &gt; dx &amp;&amp; mx1raw &lt; dw &amp;&amp; my1raw &gt; dy &amp;&amp; my1raw &lt; dh){
                    /*
                    if (!device_mouse_check_button_released(1,mb_left)){
                        global.view_timer = room_speed*1.5;
                        view_object = noone;
                    }*/
                    if (device_mouse_check_button(1, mb_left)){
                        global.view_timer = room_speed*1.5;
                        view_object = noone;
                        // actual dragging logic:
                        view_xview = drag_x - (mouse_x - view_xview);
                        view_yview = drag_y - (mouse_y - view_yview);
                        // make sure view doesn't go outside the room:
                        view_xview = max(0, min(view_xview, room_width - view_wview));
                        view_yview = max(0, min(view_yview, room_height - view_hview));
                    }
                    else{
                        global.view_timer -= 1;
                    }
               }
               //This will allow the camera to view back to the character after some time(global.view_timer)
               else if (global.view_timer) {
                   global.view_timer -= 1;
               }
            }
            if (vstick_check(1)||vstick_check(2)||global.view_timer &lt;= 1){
               view_object = obj_camera;
               view_hspeed = 35;
               view_vspeed = 35;
            }
        break;
    }
    //Shake camera
    
    if (shake &gt;= 0){
        x += random_range(-shake,shake);
        y += random_range(-shake,shake);
        shake *= 0.6;
    }
    else{shake = 0;}
    if (global.player != obj_deadbody){
        if (global.player.current_ammo &gt; 0 &amp;&amp; global.player.shooting){shake = 5;}
        if (global.player.hp &lt; health){shake = 10;}
    }
}
else{ //If control is disabled
   global.view_timer = 0;
   view_object = obj_camera;
   view_hspeed = 35;
   view_vspeed = 35;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smooth dynamic camera
if (global.control){
    var xTo, yTo, max_dis, getdis;
    max_dis = 128;

    switch(global.con_type){
    case ("PC"):
       move_towards_point(mouse_x,mouse_y,0);
       getdis = distance_to_point(mouse_x,mouse_y);
    break;
       
    case ("Mobile"):
       if (obj_control.dragging_mode){
           motion_set(global.player.image_angle,0);
           //direction = global.player.image_angle;
           getdis = global.player.throwing_power*max_dis*7.5;
       }
       else{
           motion_set(vstick_get_direction(2),0);
           //direction = vstick_get_direction(2);
           getdis = vstick_get_deviation(2)*max_dis*7.5;
       }
    break;
    }
    xTo = global.player.x + lengthdir_x(min(max_dis,getdis),direction);
    yTo = global.player.y + lengthdir_y(min(max_dis,getdis),direction);
    x += (xTo - x)/10;
    y += (yTo - y)/10;
    //Centering the camera
    /*
    view_xview = -(view_wview/2) + x;
    view_yview = -(view_hview/2) + y;
    view_xview = clamp(view_xview,0,room_width-view_wview);
    view_yview = clamp(view_yview,0,room_height-view_hview);
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
